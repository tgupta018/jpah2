  CREATE TABLE MEMBERSHIPS_BASE
   (MEMBERSHIP_ID NUMBER(15,0) NOT NULL,
	MEMBERSHIP_TYPE_CODE VARCHAR2(30 BYTE) NOT NULL,
	CONTACT_ID NUMBER(15,0) NOT NULL,
	CREATED_BY VARCHAR2(60 BYTE) NOT NULL,
	CREATION_DATE DATE NOT NULL,
	LAST_UPDATED_BY VARCHAR2(60 BYTE) NOT NULL,
	LAST_UPDATE_DATE DATE NOT NULL,
	OBJECT_VERSION_ID NUMBER(15,0) NOT NULL,
	 CONSTRAINT MEMBERSHIPS_BASE_PK PRIMARY KEY (MEMBERSHIP_ID)
    );

--   COMMENT ON COLUMN MEMBERSHIPS_BASE.MEMBERSHIP_ID IS 'Unique Id for a memberships';
--   COMMENT ON COLUMN MEMBERSHIPS_BASE.MEMBERSHIP_TYPE_CODE IS 'Typ[e of membership, references LOOKUP_CODES; domain: MEMBERSHIP_TYPE_CODE';
--   COMMENT ON COLUMN MEMBERSHIPS_BASE.CONTACT_ID IS 'Link to the customer who is the named contact for this particular membership. This is mainly of interest to Group, Corporate and Partner memberships where many users will be associated with the same membership number';
--   COMMENT ON COLUMN MEMBERSHIPS_BASE.CREATED_BY IS 'History column';
--   COMMENT ON COLUMN MEMBERSHIPS_BASE.CREATION_DATE IS 'History column';
--   COMMENT ON COLUMN MEMBERSHIPS_BASE.LAST_UPDATED_BY IS 'History column';
--   COMMENT ON COLUMN MEMBERSHIPS_BASE.LAST_UPDATE_DATE IS 'History column';
--   COMMENT ON COLUMN MEMBERSHIPS_BASE.OBJECT_VERSION_ID IS 'History column';
--   COMMENT ON TABLE MEMBERSHIPS_BASE  IS 'The memberships table holds information about corporate and group membership programs. Particular discounts (see ELIGIBLE_DISCOUNTS) are associated with a membership.  Memberships may be personal,  group, coroprate or partner Note that this table is not translated.';
--
--  CREATE OR REPLACE TRIGGER ASSIGN_MEMBERSHIP_ID BEFORE INSERT ON MEMBERSHIPS_BASE
--FOR EACH ROW
--BEGIN
-- IF :NEW.MEMBERSHIP_ID IS NULL OR :NEW.MEMBERSHIP_ID < 0 THEN
--   SELECT MEMBER_SEQ.NEXTVAL
--     INTO :NEW.MEMBERSHIP_ID
--     FROM DUAL;
--   END IF;
--END;
--/
--ALTER TRIGGER ASSIGN_MEMBERSHIP_ID ENABLE;





  CREATE TABLE MEMBERSHIP_TRANSLATIONS
   (MEMBERSHIP_TRANSLATIONS_ID NUMBER(15,0) NOT NULL,
	MEMBERSHIP_ID NUMBER(15,0) NOT NULL,
	MEMBERSHIP_NAME VARCHAR2(120 BYTE) NOT NULL,
	DESCRIPTION VARCHAR2(2000 BYTE),
	LANGUAGE VARCHAR2(30 BYTE) NOT NULL,
	SOURCE_LANGUAGE VARCHAR2(15 BYTE) NOT NULL,
	CREATED_BY VARCHAR2(60 BYTE) NOT NULL,
	CREATION_DATE DATE NOT NULL,
	LAST_UPDATED_BY VARCHAR2(60 BYTE) NOT NULL,
	LAST_UPDATE_DATE DATE NOT NULL,
	OBJECT_VERSION_ID NUMBER(15,0) NOT NULL,
	CONSTRAINT MEMBERSHIP_TRANSLATIONS_PK PRIMARY KEY (MEMBERSHIP_TRANSLATIONS_ID),
	CONSTRAINT MEMBERSHIP_TRANSLATIONS_FK FOREIGN KEY (MEMBERSHIP_ID)
	REFERENCES MEMBERSHIPS_BASE (MEMBERSHIP_ID)
   )  ;
--
--   COMMENT ON COLUMN MEMBERSHIP_TRANSLATIONS.MEMBERSHIP_ID IS 'Link to the membership record that this translation is for';
--   COMMENT ON COLUMN MEMBERSHIP_TRANSLATIONS.MEMBERSHIP_NAME IS 'Name of this particular membership';
--   COMMENT ON COLUMN MEMBERSHIP_TRANSLATIONS.DESCRIPTION IS 'Free text description of the membership';
--   COMMENT ON COLUMN MEMBERSHIP_TRANSLATIONS.LANGUAGE IS 'Language which this particular row represents';
--   COMMENT ON COLUMN MEMBERSHIP_TRANSLATIONS.SOURCE_LANGUAGE IS 'Language in which this particular row is actually encoded. If the row has not been translated yet it will not be the same as the LANGUAGE column';
--   COMMENT ON COLUMN MEMBERSHIP_TRANSLATIONS.CREATED_BY IS 'History column';
--   COMMENT ON COLUMN MEMBERSHIP_TRANSLATIONS.CREATION_DATE IS 'History column';
--   COMMENT ON COLUMN MEMBERSHIP_TRANSLATIONS.LAST_UPDATED_BY IS 'History column';
--   COMMENT ON COLUMN MEMBERSHIP_TRANSLATIONS.LAST_UPDATE_DATE IS 'History column';
--   COMMENT ON COLUMN MEMBERSHIP_TRANSLATIONS.OBJECT_VERSION_ID IS 'History column';
--
--  CREATE OR REPLACE TRIGGER ASSIGN_MEMBERSHIP_TRANS_ID BEFORE INSERT ON MEMBERSHIP_TRANSLATIONS
--FOR EACH ROW
--BEGIN
-- IF :NEW.MEMBERSHIP_TRANSLATIONS_ID IS NULL OR :NEW.MEMBERSHIP_TRANSLATIONS_ID < 0 THEN
--   SELECT MEMBER_TRANSLATIONS_SEQ.NEXTVAL
--     INTO :NEW.MEMBERSHIP_TRANSLATIONS_ID
--     FROM DUAL;
--   END IF;
--END;
--/
--ALTER TRIGGER ASSIGN_MEMBERSHIP_TRANS_ID ENABLE;







  CREATE TABLE CUSTOMER_IDENTIFICATIONS
   (	CUSTOMER_ID NUMBER(15,0) NOT NULL,
	ID_TYPE_CODE VARCHAR2(30 BYTE) NOT NULL,
	ID_DETAIL VARCHAR2(20 BYTE) NOT NULL,
	ADDITIONAL_INFORMATION VARCHAR2(1000 BYTE),
	VERIFIED_FLAG VARCHAR2(1 BYTE) DEFAULT 'N' NOT NULL,
	VERIFIED_DATE DATE,
	VERIFIED_BY NUMBER(15,0),
	VERIFICATION_METHOD_CODE VARCHAR2(30 BYTE),
	CREATED_BY VARCHAR2(60 BYTE) NOT NULL,
	CREATION_DATE DATE NOT NULL,
	LAST_UPDATED_BY VARCHAR2(60 BYTE) NOT NULL,
	LAST_UPDATE_DATE DATE NOT NULL,
	OBJECT_VERSION_ID NUMBER(15,0) NOT NULL,
	 CONSTRAINT VERIFIED_ID_PK PRIMARY KEY (CUSTOMER_ID),
	 CONSTRAINT CUSTOMER_ID_VERIFY_CHK CHECK (VERIFIED_FLAG in ('Y','N'))
--	 CONSTRAINT CUSTOMER_IDENTIFICATIONS_FK FOREIGN KEY (CUSTOMER_ID)
--	  REFERENCES PERSONS (PERSON_ID),
--	 CONSTRAINT CUSTOMER_IDENTIFICATIONS__FK1 FOREIGN KEY (VERIFIED_BY)
--	  REFERENCES PERSONS (PERSON_ID) ENABLE
   ) ;

--   COMMENT ON COLUMN CUSTOMER_IDENTIFICATIONS.CUSTOMER_ID IS 'Link to the persons table';
--   COMMENT ON COLUMN CUSTOMER_IDENTIFICATIONS.ID_TYPE_CODE IS 'The type of identity provided by the customer. A look up in the CODE_LOOKUPS table with the domain of ID_TYPE_CODE';
--   COMMENT ON COLUMN CUSTOMER_IDENTIFICATIONS.ID_DETAIL IS 'The relevant number corresponding to the selected ID type';
--   COMMENT ON COLUMN CUSTOMER_IDENTIFICATIONS.ADDITIONAL_INFORMATION IS 'Free form text for staff use';
--   COMMENT ON COLUMN CUSTOMER_IDENTIFICATIONS.VERIFIED_FLAG IS 'Boolean Y/N, has this piece of ID been verified ';
--   COMMENT ON COLUMN CUSTOMER_IDENTIFICATIONS.VERIFIED_DATE IS 'Date / time that the verification took place';
--   COMMENT ON COLUMN CUSTOMER_IDENTIFICATIONS.VERIFIED_BY IS 'Id of the Staff member who verified the record';
--   COMMENT ON COLUMN CUSTOMER_IDENTIFICATIONS.VERIFICATION_METHOD_CODE IS 'The method of verification. A lookup in the LOOKUP_CODES table referencing the VERIFICATION_METHOD_CODE domain';
--   COMMENT ON COLUMN CUSTOMER_IDENTIFICATIONS.CREATED_BY IS 'History column';
--   COMMENT ON COLUMN CUSTOMER_IDENTIFICATIONS.CREATION_DATE IS 'History column';
--   COMMENT ON COLUMN CUSTOMER_IDENTIFICATIONS.LAST_UPDATED_BY IS 'History column';
--   COMMENT ON COLUMN CUSTOMER_IDENTIFICATIONS.LAST_UPDATE_DATE IS 'History column';
--   COMMENT ON COLUMN CUSTOMER_IDENTIFICATIONS.OBJECT_VERSION_ID IS 'History column';
--   COMMENT ON TABLE CUSTOMER_IDENTIFICATIONS  IS 'Various forms of identification provided by a customer. Confirmed identity will be used to configure the rules used during the order process, allowing higer spending and less manual verification';
--


  CREATE TABLE CUSTOMER_INTERESTS
   (	CUSTOMER_ID NUMBER(15,0) NOT NULL,
	CUSTOMER_INTERESTS_ID NUMBER(15,0) NOT NULL,
	CATEGORY_ID NUMBER(15,0) NOT NULL,
	CREATED_BY VARCHAR2(60 BYTE) NOT NULL,
	CREATION_DATE DATE NOT NULL,
	LAST_UPDATED_BY VARCHAR2(60 BYTE) NOT NULL,
	LAST_UPDATE_DATE DATE NOT NULL,
	OBJECT_VERSION_ID NUMBER(15,0) NOT NULL,
	 CONSTRAINT CUSTOMER_INTERESTS_PK PRIMARY KEY (CUSTOMER_INTERESTS_ID),
	 CONSTRAINT CUSTOMER_CATEGORY_ID_UNIQUE UNIQUE (CUSTOMER_ID, CATEGORY_ID)
--	 CONSTRAINT CUSTOMER_INTERESTS_FK1 FOREIGN KEY (CATEGORY_ID)
--	  REFERENCES PRODUCT_CATEGORIES_BASE (CATEGORY_ID),
--	 CONSTRAINT CUSTOMER_INTERESTS_PERSON_FK1 FOREIGN KEY (CUSTOMER_ID)
--	  REFERENCES PERSONS (PERSON_ID) ENABLE
   );

--   COMMENT ON COLUMN CUSTOMER_INTERESTS.CUSTOMER_ID IS 'Unique Id for the customer';
--   COMMENT ON COLUMN CUSTOMER_INTERESTS.CATEGORY_ID IS 'The Id iof the category that they are interested in ';
--   COMMENT ON COLUMN CUSTOMER_INTERESTS.CREATED_BY IS 'History column';
--   COMMENT ON COLUMN CUSTOMER_INTERESTS.CREATION_DATE IS 'History column';
--   COMMENT ON COLUMN CUSTOMER_INTERESTS.LAST_UPDATED_BY IS 'History column';
--   COMMENT ON COLUMN CUSTOMER_INTERESTS.LAST_UPDATE_DATE IS 'History column';
--   COMMENT ON COLUMN CUSTOMER_INTERESTS.OBJECT_VERSION_ID IS 'History column';
--   COMMENT ON TABLE CUSTOMER_INTERESTS  IS 'The table is used to record the product categories that are of interest to the customer. This information is used to generate the recomendations list on the home page';
--
--  CREATE OR REPLACE TRIGGER ASSIGN_CUSTOMER_INTRSTS_ID BEFORE INSERT ON CUSTOMER_INTERESTS
--FOR EACH ROW
--BEGIN
-- IF :NEW.CUSTOMER_INTERESTS_ID IS NULL OR :NEW.CUSTOMER_INTERESTS_ID < 0 THEN
--   SELECT CUSTOMER_INTERESTS_SEQ.NEXTVAL
--     INTO :NEW.CUSTOMER_INTERESTS_ID
--     FROM DUAL;
--   END IF;
--END;
--/
--ALTER TRIGGER ASSIGN_CUSTOMER_INTRSTS_ID ENABLE;

